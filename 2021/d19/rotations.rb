#!/usr/bin/env ruby
#
# Determines which rotations are needed for all 24 unique orientations
#
# You can get an exhaustive set of orientations for a point by rotating it 0..3
# times on each axis, but that generates 64 orientations, some of which are
# dupes.
#
# This utility script generates 64 orientations, and then prints which rotations
# are dupes so the main script can be more efficient by only doing the 24
# necessary rotations

Point = Struct.new(:x, :y, :z) do
  def rotate_axis_90(axis)
    # 90 degree rotation vectors
    # https://stackoverflow.com/questions/14607640/rotating-a-vector-in-3d-space
    # cos90 = 0, sin90 = 1,
    case axis
    when :x
      Point.new(x, -z, y)
    when :y
      Point.new(z, y, -x)
    when :z
      Point.new(-y, x, z)
    end
  end
end

p = Point.new(1,2,3)
rots = {}

(0..3).each do |x_rots|
  x_rots.times { p = p.rotate_axis_90(:x) }
  (0..3).each do |y_rots|
    y_rots.times { p = p.rotate_axis_90(:y) }
    (0..3).each do |z_rots|
      z_rots.times { p = p.rotate_axis_90(:z) }
      rots["x#{x_rots}y#{y_rots}z#{z_rots}"] = p
    end
  end
end

rots.group_by(&:last).transform_values { |l| l.map(&:first) }.each_with_index do |kv, idx|
  pt, rs = kv
  puts "#{idx.to_s.rjust(2)}: #{pt} generated by #{rs.join(", ")}"
end

puts "\n\n"
puts "["
rots.group_by(&:last).keys.each do |val|
  s = "  Point.new("
  [:x, :y, :z].each do |axis|
    case val.send(axis)
    when p.x; s << "x"
    when -p.x; s << "-x"
    when p.y; s << "y"
    when -p.y; s << "-y"
    when p.z; s << "z"
    when -p.z; s << "-z"
    end
    s << ", " unless axis == :z
  end
  s << "),"
  puts s
end
puts "]"
